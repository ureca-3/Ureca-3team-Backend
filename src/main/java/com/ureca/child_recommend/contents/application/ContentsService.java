package com.ureca.child_recommend.contents.application;

import com.ureca.child_recommend.child.infrastructure.ChildRepository;
import com.ureca.child_recommend.child.presentation.dto.ContentsRecommendDto;
import com.ureca.child_recommend.config.embedding.EmbeddingUtil;
import com.ureca.child_recommend.config.gpt.GptWebClient;
import com.ureca.child_recommend.config.redis.util.RedisUtil;
import com.ureca.child_recommend.contents.domain.Contents;
import com.ureca.child_recommend.contents.domain.ContentsMbtiScore;
import com.ureca.child_recommend.contents.domain.ContentsVector;
import com.ureca.child_recommend.contents.domain.Enum.ContentsStatus;
import com.ureca.child_recommend.contents.infrastructure.ContentsMbtiRepository;
import com.ureca.child_recommend.contents.infrastructure.ContentsRepository;
import com.ureca.child_recommend.contents.infrastructure.ContentsVectorRepository;
import com.ureca.child_recommend.contents.presentation.dto.ContentsDto;
import com.ureca.child_recommend.contents.presentation.dto.GptDto;
import com.ureca.child_recommend.global.exception.BusinessException;
import com.ureca.child_recommend.global.exception.errorcode.CommonErrorCode;
import com.ureca.child_recommend.relation.FeedBack;
import com.ureca.child_recommend.relation.infrastructure.FeedBackRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.listener.ChannelTopic;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class ContentsService {
    private final ContentsRepository contentsRepository;
    private final ContentsMbtiRepository mbtiRepository;
    private final ChildRepository childRepository;
    private final EmbeddingUtil embeddingUtil;
    private final RedisUtil redisUtil;
    private final ContentsVectorRepository contentsVectorRepository;
    private final FeedBackRepository feedBackRepository;

    private static final String USER = "user";
    private static final String ASSISTNAT = "assistant";
    private static final String SYSTEM = "system";

    private final GptWebClient gptWebClient;
    private final Map<Long, GptDto.Request> memberChatMap = new HashMap<>();
    private final ChannelTopic bookChannel;
    // ÎåÄÌôîÎÇ¥Ïö© ÏÇ≠Ï†ú
    public void removeChat(Long userId) {
        if (!memberChatMap.containsKey(userId)) {
            throw new BusinessException(CommonErrorCode.GPT_SERVER_ERROR);
        }
        memberChatMap.remove(userId);
    }

    // Î©îÏãúÏßÄ Ï∂îÍ∞Ä
    private void addChatMessages(GptDto.Request request, String role, String message) {
        request.addMessage(role, message);
    }

    public Contents saveContent(Long userId, ContentsDto.Request contentsRequest, ContentsMbtiScore mbtiScore, String mbtiResult) {
        Contents content = Contents.saveContents(contentsRequest, mbtiScore, mbtiResult);
        mbtiRepository.save(mbtiScore);
        contentsRepository.save(content);
        removeChat(userId);
        return content;
    }

    // Ï†ÄÏû•, Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†• ÌõÑ GPT ÌôúÏö©ÌïòÏó¨ mbti Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    @Transactional
    public Contents saveContents(Long userId, ContentsDto.Request request) {
        GptDto.Request gptRequest;
        if (memberChatMap.get(userId) == null) {
            gptRequest = gptWebClient.of(500);
            addChatMessages(gptRequest, SYSTEM, "ÎÑàÎäî Ï±Ö Ï§ÑÍ±∞Î¶¨Î•º Í∏∞Î∞òÏúºÎ°ú MBTI ÎπÑÏú®ÏùÑ ÏïåÎ†§Ï£ºÎäî aiÏïº. " +
                    "Ï§ÑÍ±∞Î¶¨Î•º Í∏∞Î∞òÏúºÎ°ú MBTI ÏÑ±Ìñ•ÏùÑ Ï†ÑÏ≤¥ 100%Ïù∏ EÏôÄ IÏùò ÎπÑÏú® Ìï© Ï§ë EÏùò ÎπÑÏú®, Ï†ÑÏ≤¥ 100%Ïù∏ SÏôÄ NÏùò ÎπÑÏú® Ìï© Ï§ë SÏùò ÎπÑÏú®, Ï†ÑÏ≤¥ 100%Ïù∏ TÏôÄ FÏùò ÎπÑÏú® Ìï© Ï§ë TÏùò ÎπÑÏú®, Ï†ÑÏ≤¥ 100%Ïù∏ JÏôÄ PÏùò ÎπÑÏú® Ìï© Ï§ë JÏùò ÎπÑÏú®ÏùÑ Íµ¨Ìï¥Ï§ò." +
                    "MBTI ÌäπÏßïÏùÄ ÏïÑÎûòÏôÄ Í∞ôÏúºÎãà, Ìï¥Îãπ ÌäπÏßïÎì§Î°ú ÎπÑÏú®ÏùÑ Í≥ÑÏÇ∞Ìï¥Ï§ò" +
                    "INFJ : Ï∞®Í∞ÄÏö¥, Ïïå Ïàò ÏóÜÎäî, ÎØ∏Î¨òÌïú, Îî∞ÎúªÌïú, Í∞êÏÑ±Ï†ÅÏù∏\n" +
                    "INFP : Í∞êÏÑ±Ï†ÅÏù∏, ÎÇòÎ•∏Ìïú, Ïö∞Ïö∏Ìïú, Îî∞ÎúªÌïú, ÎààÎ¨ºÏù¥ ÎßéÏùÄ, ÏöîÏ†ïÍ∞ôÏùÄ\n" +
                    "INTJ : Î¨¥Ïã¨Ìïú, ÎÉâÏ†ïÌïú, ÏãúÎãàÏª¨Ìïú, ÏßÄÏ†ÅÏù∏, ÏùÄÍ∑º Îã§Ï†ïÌïú, ÏÉùÍ∞ÅÏù¥ ÍπäÏùÄ\n" +
                    "INTP :ÏòÅÎ¶¨Ìïú, Í¥¥ÏßúÍ∞ôÏùÄ, Í±¥Ï°∞Ìïú, Í∏∞Í≥ÑÍ∞ôÏùÄ, ÏßÄÏ†ÅÏù∏, ÎÑàÎìúÌïú, Î¨¥Ïã¨Ìïú, Ï∞ΩÏùòÏ†ÅÏù∏\n" +
                    "ISTP : ÏãúÎãàÏª¨Ìïú, ÌîºÍ≥§Ìïú, Í∑ÄÏ∞ÆÏùåÏù¥ ÎßéÏùÄ, Ïø®Ìïú, Î¨¥Í¥ÄÏã¨Ìïú, ÏÇ¨ÌöåÏ†Å Í±∞Î¶¨ÎëêÍ∏∞\n" +
                    "ISFP : Ï§ëÏã¨Ï†ÅÏù∏, ÏòàÏà†Ï†ÅÏù∏, Ìò∏Í∏∞Ïã¨Ïù¥ ÎßéÏùÄ, Ïù∏Í∞Ñ Í≥†ÏñëÏù¥\n" +
                    "ISTJ : Î∂ÑÏÑùÏ†ÅÏù∏, Í∑úÏπôÏ†ÅÏù∏, Í∑úÏú®Ï†ÅÏù∏, Î™®Î≤îÏ†ÅÏù∏, Î¨¥ÎöùÎöùÌïú\n" +
                    "ISFJ :ÏàòÌò∏Ï†ÅÏù∏, ÏÑ†Ìïú, Íµ¨Ìò∏Ï†ÅÏù∏, ÏπúÏ†àÌïú, Îî∞Ïä§Ìïú, ÏòÅÏó≠Ïù¥ ÎÑìÏùÄ\n" +
                    "ENFJ : Ïò®ÌôîÌïú, Îã§Ï†ïÌïú, Î∂ÄÎìúÎü¨Ïö¥, ÏßÄÌòúÎ°úÏö¥, Îî∞Ïä§Ìïú, Î™®Î≤îÏ†ÅÏù∏\n" +
                    "ENFP : Í∏çÏ†ïÏ†ÅÏù∏, ÏπúÏ†àÌïú, ÏÇ¨ÍµêÏ†ÅÏù∏, ÌôúÎ∞úÌïú, Ìï¥Ìîº Î∞îÏù¥Îü¨Ïä§\n" +
                    "ENTJ :ÎÉâÎã¥Ìïú, ÎÉâÏ†ïÌïú, ÏßÄÏ†ÅÏù∏, Ìò∏ÌÉïÌïú, Ïø®Ìïú, ÏßÄÌúòÏ†ÅÏù∏\n" +
                    "ENTP : Ïú†Î®∏Îü¨Ïä§Ìïú, Ïø®Ìïú, ÎßêÏù¥ ÎßéÏùÄ, Îí∑Ïã¨ Î∂ÄÏ°±Ìïú, Ï£ºÎèÑÏ†ÅÏù∏, Ï∞ΩÏùòÏ†ÅÏù∏\n" +
                    "ESTJ : ÎÉâÎã¥Ìïú, ÎÉâÏ≤†Ìïú, ÏßÄÏ†ÅÏù∏, ÏßÄÎèÑÏ†ÅÏù∏, ÏßÄÌúòÏ†ÅÏù∏, Í¥ÄÎ¶¨ÏûêÍ∞ôÏùÄ\n" +
                    "ESFJ : ÏÑ†Ìïú, Íµ¨Ìò∏Ï†ÅÏù∏, Ïù∏Îß•Ïù¥ ÎÑìÏùÄ, Î™®Î≤îÏ†ÅÏù∏, ÏÇ¨ÍµêÏ†ÅÏù∏, ÏÜåÌÜµÏ†ÅÏù∏\n" +
                    "ESTP : Ìò∏ÌÉïÌïú, ÏßÅÏÑ§Ï†ÅÏù∏, ÏùÄÍ∑º ÎÉâÎã¥Ìïú, Ïú†Î®∏Îü¨Ïä§Ìïú, Ïø®Ìïú, Î™®ÌóòÏ†ÅÏù∏\n" +
                    "ESFP : ÏÇ¨ÍµêÏ†ÅÏù∏, ÏæåÌôúÌïú, Ìï≠ÏÉÅ Î∞îÏÅú, Ïù∏Ïã∏Í∞ôÏùÄ, ÏπúÍµ¨Í∞Ä ÎßéÏùÄ, ÏûÖÎã¥Ïù¥ Îõ∞Ïñ¥ÎÇú\n" +
                    "\n");
        } else {
            gptRequest = memberChatMap.get(userId);
        }

        String summary = request.getDescription();

        addChatMessages(gptRequest, USER, "'" + summary + "'" +
                "Ïùò Ï§ÑÍ±∞Î¶¨Ïù∏ ÏΩòÌÖêÏ∏†Ïùò MBTIÏùò ÎπÑÏú®ÏùÑ Ï†ÑÏ≤¥ 100% Ï§ë " +
                "E: {}%\n" +
                "S: {}%\n" +
                "T: {}%\n" +
                "J: {}%\n ÌòïÏãùÏúºÎ°ú ÏïåÎ†§Ï£ºÎäîÎç∞, Í∞Å Í∞í 0Ïù¥Îûë 100ÏùÄ Ï†àÎåÄ Ï£ºÏßÄÎßà" );

        GptDto.Response gptResponse = gptWebClient.assistantRes(gptRequest);

        String content = gptResponse.getChoices().get(0).getMessage().getContent();
        addChatMessages(gptRequest, ASSISTNAT, content);
        memberChatMap.put(userId, gptRequest);

        String mbtiInfo = gptRequest.getMessages().get(2).content; // ÏßàÎ¨∏Ïóê ÎåÄÌïú gpt ÎåÄÎãµ Îç∞Ïù¥ÌÑ∞

        // Í≤∞Í≥º mbti ÌååÏã±
        Pattern pattern = Pattern.compile("(\\d+)%"); // {}% ÌòïÏãùÏùò pattern ÌååÏïÖ
        Matcher matcher = pattern.matcher(mbtiInfo); // Ìå®ÌÑ¥Ïóê Îß§Ïπ≠Ìï† Î¨∏ÏûêÏó¥ÏùÑ ÏûÖÎ†•Ìï¥ Matcher ÏÉùÏÑ±

        int eiPercentage = 0;
        int snPercentage = 0;
        int tfPercentage = 0;
        int jpPercentage = 0;

        int index = 0;
        while (matcher.find()) {
            int value = Integer.parseInt(matcher.group(1)); // Îß§Ïπ≠ÎêòÎäî Î¨∏ÏûêÏó¥ Ï§ë 1Î≤àÏß∏ Í∑∏Î£πÏùò Î¨∏ÏûêÏó¥ Î∞òÌôò
            switch (index) {
                case 0 -> eiPercentage = value;
                case 1 -> snPercentage = value;
                case 2 -> tfPercentage = value;
                case 3 -> jpPercentage = value;
            }
            index++;
        }

        ContentsMbtiScore mbtiScore = ContentsMbtiScore.saveContentsMbti(eiPercentage, snPercentage, tfPercentage, jpPercentage);

        // mbti Í≤∞Í≥º Í≥ÑÏÇ∞
        StringBuilder mbtiRes = new StringBuilder();
        if (eiPercentage > 50) mbtiRes.append("E"); else mbtiRes.append("I");
        if (snPercentage > 50) mbtiRes.append("S"); else mbtiRes.append("N");
        if (tfPercentage > 50) mbtiRes.append("T"); else mbtiRes.append("F");
        if (jpPercentage > 50) mbtiRes.append("J"); else mbtiRes.append("P");

        // Ï†úÎ™©Í≥º ÏûëÍ∞Ä ÌôïÏù∏ Ïãú ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
        Contents savedContent = contentsRepository.findByTitleAndAuthor(request.getTitle(), request.getAuthor()).orElseGet(()
                -> saveContent(userId, request, mbtiScore, mbtiRes.toString()));

        //ÏûÑÎ≤†Îî©Î≤°ÌÑ∞ ÏÉùÏÑ±
        inputEmbedding(savedContent.getId());


        // üì¢ ÏïåÎ¶º Î∞úÌñâ: Redis Ï±ÑÎÑêÏóê Î©îÏãúÏßÄ Ï†ÑÏÜ°
        String message = String.format("New Contents: %s", savedContent.getTitle());
        redisUtil.sendNotified(bookChannel.getTopic(),message);

        return savedContent;
    }

    public ContentsDto.Response readContents(Long contentsId) {
        Contents findContents = contentsRepository.findById(contentsId).orElseThrow(()
                -> new BusinessException(CommonErrorCode.CONTENTS_NOT_FOUND));

        return ContentsDto.Response.contentsData(findContents, findContents.getContentsMbti());
    }

    @Transactional
    public ContentsDto.Response updateContents(Long contentsId, ContentsDto.Request request) { // ÏàòÏ†ïÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥ Î∞òÏòÅ
        Contents findContents = contentsRepository.findById(contentsId).orElseThrow(()
                -> new BusinessException(CommonErrorCode.CONTENTS_NOT_FOUND));

        findContents.updateContents(request);
        return ContentsDto.Response.contentsData(findContents, findContents.getContentsMbti());
    }

    @Transactional
    public ContentsDto.Response deleteContents(Long contentsId) {
        Contents findContents = contentsRepository.findById(contentsId).orElseThrow(()
                -> new BusinessException(CommonErrorCode.CONTENTS_NOT_FOUND));

        findContents.updateStatus(ContentsStatus.NONACTIVE);
        return ContentsDto.Response.contentsData(findContents, findContents.getContentsMbti());
    }

    // Ïª®ÌÖêÏ∏† Í≤ÄÏÉâ - activeÏù∏ ÏÉÅÌÉúÎßå
    @Transactional
    public List<ContentsDto.Response> searchContents(String keyword) {
        List<Contents> searchContents = contentsRepository.findByStatusAndTitleContaining(ContentsStatus.ACTIVE, keyword);
        if (searchContents.isEmpty() || keyword.equals("")) {
            throw new BusinessException(CommonErrorCode.CONTENTS_NOT_FOUND);
        }

        // Contents Î¶¨Ïä§Ìä∏Î•º ContentsDto.Response Î¶¨Ïä§Ìä∏Î°ú Î≥ÄÌôò
        return searchContents.stream()
                .map(ContentsDto.Response::contentsSingleData) // ContentsÎ•º ContentsDto.ResponseÎ°ú Îß§Ìïë
                .collect(Collectors.toList());
    }


    // Ïª®ÌÖêÏ∏† Î¶¨Ïä§Ìä∏ ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨ - 5Í∞úÏî© (ÏµúÏã† Îç∞Ïù¥ÌÑ∞)
    public List<ContentsDto.Response> getAllContents() {
        return contentsRepository.findAll().stream()
                .map(ContentsDto.Response::contentsSingleData)
                .collect(Collectors.toList());
    }



    private void inputEmbedding(Long contentsId) {
        Contents contents = contentsRepository.findById(contentsId).orElseThrow(() -> new BusinessException(CommonErrorCode.CONTENTS_NOT_FOUND));

        GptDto.Request gptRequest;

        gptRequest = gptWebClient.of(500);
        addChatMessages(gptRequest, SYSTEM, "ÎãπÏã†ÏùÄ ÌÇ§ÏõåÎìúÎ•º Ï∂îÏ∂úÌïòÍ≥† ÌÖçÏä§Ìä∏Î•º ÏöîÏïΩÌïòÎäî ÏûëÏóÖÏùÑ ÏàòÌñâÌïòÎäî ÎèÑÏö∞ÎØ∏ÏûÖÎãàÎã§." +
                " Ï£ºÏñ¥ÏßÑ ÌÖçÏä§Ìä∏ÏóêÏÑú Í∞ÄÏû• Ï§ëÏöîÌïú Îã§ÏÑØ Í∞úÏùò ÌÇ§ÏõåÎìúÎ•º Ï†úÍ≥µÌïòÍ≥†, Îã§Ïùå ÌòïÏãùÏúºÎ°ú ÏöîÏïΩÌïòÏÑ∏Ïöî:\n" +
                "ÌÇ§ÏõåÎìú: [ÌÇ§ÏõåÎìú Î™©Î°ù]\n" +
                "ÏöîÏïΩ: [Îëê Î¨∏Ïû• ÏöîÏïΩ]\n");
        addChatMessages(gptRequest, USER, contents.getDescription());

        GptDto.Response gptResponse = gptWebClient.assistantRes(gptRequest);
        String content = gptResponse.getChoices().get(0).getMessage().getContent();

        // ÌÇ§ÏõåÎìúÏôÄ ÏöîÏïΩÎ≥∏ÏùÑ Î∂ÑÎ¶¨ÌïòÍ∏∞ ÏúÑÌï¥ Î®ºÏ†Ä Ï§Ñ Î∞îÍøà(\n)ÏúºÎ°ú ÎÇòÎàïÎãàÎã§.
        String[] lines = content.split("\n");

        // Í∞Å Ï§ÑÏóêÏÑú ÌÇ§ÏõåÎìúÏôÄ ÏöîÏïΩÎ≥∏ÏùÑ Ï∂îÏ∂úÌï©ÎãàÎã§.
        String keywords = "";
        String summary = "";

        // ÌÇ§ÏõåÎìúÏôÄ ÏöîÏïΩÎ≥∏ÏùÑ Ï∞æÏïÑÏÑú Î≥ÄÏàòÏóê Ï†ÄÏû•
        for (String line : lines) {
            if (line.startsWith("ÌÇ§ÏõåÎìú:")) {
                keywords = line.substring("ÌÇ§ÏõåÎìú:".length()).trim();
            } else if (line.startsWith("ÏöîÏïΩ:")) {
                summary = line.substring("ÏöîÏïΩ:".length()).trim();
            }
        }

        // String.formatÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏµúÏ¢Ö Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
        String input = String.format("Ï±Ö Ï†úÎ™©: %s, ÌÇ§ÏõåÎìú: %s, Ï†ÄÏûê: %s, ÏöîÏïΩÎ≥∏: %s, MBTI: %s, %s, %s, %s",
                contents.getTitle(),
                keywords,
                contents.getAuthor(),
                summary,
                contents.getContentsMbti().getEiScore() + "%",
                contents.getContentsMbti().getSnScore() + "%",
                contents.getContentsMbti().getTfScore() + "%",
                contents.getContentsMbti().getJpScore() + "%");

        System.out.println(input);

        //ÏûÑÎ≤†Îî© Î≤°ÌÑ∞ ÏÉùÏÑ±
        float[] contentsEmbedding = embeddingUtil.createEmbedding(input);

        saveContentsEmbedding(contentsEmbedding,contents);

    }

    protected void saveContentsEmbedding(float[] contentsEmbedding, Contents contents){

        ContentsVector contentsVector = ContentsVector.createContentsVector(contentsEmbedding,contents);
        contentsVectorRepository.save(contentsVector);

    }


    public List<ContentsRecommendDto.Response.SimilarBookDto> seachUserLikeContentsSim(Long userId, Long childId) {
        childRepository.findByIdAndUserId(childId,userId).orElseThrow(() -> new BusinessException(CommonErrorCode.CHILD_NOT_FOUND));

        List<FeedBack> feedBackList = feedBackRepository.findTop5LikesByChildId(childId);

        //  Í∞Å ÌîºÎìúÎ∞±Ïùò ÏûÑÎ≤†Îî© Î≤°ÌÑ∞ Ï∂îÏ∂ú
        List<Long> contentsIdLists = feedBackList.stream()
                .map(feedback -> feedback.getContents().getId())
                .toList();


        List<Long> VectorcontentsIdList = contentsVectorRepository.findSimilarContentsByAverageEmbedding(contentsIdLists);

        List<Contents> contentsList = contentsRepository.findByIdIn(VectorcontentsIdList);

        return contentsList.stream()
                        .map(o-> ContentsRecommendDto.Response.SimilarBookDto.of(o.getId(),o.getTitle(),o.getPosterUrl()))
                .collect(Collectors.toList());
    }
}
